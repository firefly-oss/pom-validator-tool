/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.firefly.tools.pomvalidator.feature.formatter;

import com.firefly.tools.pomvalidator.feature.OutputFormatter;
import com.firefly.tools.pomvalidator.model.ValidationResult;
import com.firefly.tools.pomvalidator.model.ValidationIssue;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Formats validation results as Markdown documentation.
 * Perfect for generating reports and documentation.
 */
public class MarkdownFormatter implements OutputFormatter {
    
    @Override
    public String format(Map<Path, ValidationResult> results) {
        StringBuilder md = new StringBuilder();
        
        // Header
        md.append("# POM Validation Report\n\n");
        md.append("**Generated by:** POM Validator Tool v1.0.0-SNAPSHOT  \n");
        md.append("**Date:** ").append(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).append("  \n");
        md.append("**Total POMs Analyzed:** ").append(results.size()).append("\n\n");
        
        // Summary statistics
        int totalErrors = 0;
        int totalWarnings = 0;
        int totalInfos = 0;
        int validCount = 0;
        
        for (ValidationResult result : results.values()) {
            totalErrors += result.getErrors().size();
            totalWarnings += result.getWarnings().size();
            totalInfos += result.getInfos().size();
            if (result.isValid()) {
                validCount++;
            }
        }
        
        md.append("## Summary\n\n");
        md.append("| Metric | Count |\n");
        md.append("|--------|-------|\n");
        md.append("| ‚úÖ Valid POMs | ").append(validCount).append(" |\n");
        md.append("| ‚ùå Invalid POMs | ").append(results.size() - validCount).append(" |\n");
        md.append("| üî¥ Total Errors | ").append(totalErrors).append(" |\n");
        md.append("| üü° Total Warnings | ").append(totalWarnings).append(" |\n");
        md.append("| üîµ Total Info | ").append(totalInfos).append(" |\n\n");
        
        // Overview table
        if (!results.isEmpty()) {
            md.append("## POM Files Overview\n\n");
            md.append("| File | Status | Errors | Warnings | Info |\n");
            md.append("|------|--------|--------|----------|------|\n");
            
            for (Map.Entry<Path, ValidationResult> entry : results.entrySet()) {
                ValidationResult result = entry.getValue();
                String fileName = entry.getKey().getFileName().toString();
                String parent = entry.getKey().getParent() != null ? 
                    entry.getKey().getParent().getFileName().toString() + "/" : "";
                String status = result.isValid() ? "‚úÖ Valid" : "‚ùå Invalid";
                
                md.append("| `").append(parent).append(fileName).append("` | ");
                md.append(status).append(" | ");
                md.append(result.getErrors().size()).append(" | ");
                md.append(result.getWarnings().size()).append(" | ");
                md.append(result.getInfos().size()).append(" |\n");
            }
            md.append("\n");
        }
        
        // Detailed results
        md.append("## Detailed Results\n\n");
        
        for (Map.Entry<Path, ValidationResult> entry : results.entrySet()) {
            Path pomPath = entry.getKey();
            ValidationResult result = entry.getValue();
            
            md.append("### `").append(pomPath.toString()).append("`\n\n");
            
            if (result.isValid() && result.getWarnings().isEmpty() && result.getInfos().isEmpty()) {
                md.append("‚úÖ **No issues found** - This POM is perfectly valid!\n\n");
            } else {
                // Errors
                if (!result.getErrors().isEmpty()) {
                    md.append("#### ‚ùå Errors (").append(result.getErrors().size()).append(")\n\n");
                    for (ValidationIssue issue : result.getErrors()) {
                        md.append("- **").append(escapeMarkdown(issue.getMessage())).append("**\n");
                        if (issue.hasSuggestion()) {
                            md.append("  - üí° *Fix:* ").append(escapeMarkdown(issue.getSuggestion())).append("\n");
                        }
                    }
                    md.append("\n");
                }
                
                // Warnings
                if (!result.getWarnings().isEmpty()) {
                    md.append("#### ‚ö†Ô∏è Warnings (").append(result.getWarnings().size()).append(")\n\n");
                    for (ValidationIssue issue : result.getWarnings()) {
                        md.append("- ").append(escapeMarkdown(issue.getMessage())).append("\n");
                        if (issue.hasSuggestion()) {
                            md.append("  - üí° *Suggestion:* ").append(escapeMarkdown(issue.getSuggestion())).append("\n");
                        }
                    }
                    md.append("\n");
                }
                
                // Info
                if (!result.getInfos().isEmpty()) {
                    md.append("#### ‚ÑπÔ∏è Information (").append(result.getInfos().size()).append(")\n\n");
                    for (ValidationIssue issue : result.getInfos()) {
                        md.append("- ").append(escapeMarkdown(issue.getMessage())).append("\n");
                        if (issue.hasSuggestion()) {
                            md.append("  - üí° *Tip:* ").append(escapeMarkdown(issue.getSuggestion())).append("\n");
                        }
                    }
                    md.append("\n");
                }
            }
            
            md.append("---\n\n");
        }
        
        // Footer
        md.append("## Recommendations\n\n");
        if (totalErrors > 0) {
            md.append("### üî¥ Critical Issues\n");
            md.append("You have **").append(totalErrors).append(" errors** that must be fixed before the POMs can be considered valid.\n\n");
        }
        if (totalWarnings > 0) {
            md.append("### üü° Important Improvements\n");
            md.append("There are **").append(totalWarnings).append(" warnings** that should be addressed to improve POM quality.\n\n");
        }
        if (totalErrors == 0 && totalWarnings == 0) {
            md.append("### ‚úÖ Great Job!\n");
            md.append("All POMs are valid with no critical issues. Keep up the good work!\n\n");
        }
        
        md.append("---\n\n");
        md.append("*Generated by [POM Validator Tool](https://github.com/firefly-oss/pom-validator-tool) - Part of the Firefly Platform Toolset*\n");
        
        return md.toString();
    }
    
    private String escapeMarkdown(String text) {
        // Escape special Markdown characters
        return text.replace("*", "\\*")
                   .replace("_", "\\_")
                   .replace("`", "\\`")
                   .replace("#", "\\#")
                   .replace("+", "\\+")
                   .replace("-", "\\-")
                   .replace(".", "\\.")
                   .replace("!", "\\!")
                   .replace("[", "\\[")
                   .replace("]", "\\]")
                   .replace("(", "\\(")
                   .replace(")", "\\)")
                   .replace("{", "\\{")
                   .replace("}", "\\}")
                   .replace("|", "\\|");
    }
    
    @Override
    public void write(Map<Path, ValidationResult> results, Path outputFile) throws IOException {
        String markdown = format(results);
        Files.writeString(outputFile, markdown);
    }
}
